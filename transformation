const facetName = 'occasion'

const facetValues = ["Casual Day Out", "Formal Evening", "Office Wear", "Wedding Guest", "Party Night", "Vacation Vibes", "Active & Sporty", "Cozy & Comfy", "Date Night"];

async function transform(record, helper) {

  // Retrieve the API key from secrets.
  const secret = helper.secrets.get('apiKey');

  if (record.occasion) {
     return {
      objectID: record.objectID,
      occasion_enriched: "Yes",
      occasion: record.occasion
    };
  }

  const textAttributes = { 
    'name': record.name,  
    'categories': record.list_categories, 
    'brand': record.brand,
    'image': record.primary_image
  };


 const requestContent = `Data: ${JSON.stringify(textAttributes)}\n` +
                           `Text Attributes: ${JSON.stringify(['name', 'categories', 'brand', 'image'])}\n` +
   `Output Attributes: ${JSON.stringify([facetName])}\n` +
   `Instruction: ${prompt}`;

                           

  // Get the enrichment from the LLM.
  const enrichment = await getModelResponse(requestContent, textAttributes.image, secret);


  if (!enrichment) {
    return {
      objectID: record.objectID,
      occasion_enriched: "No",
    };
  }


  try {
    return {
      objectID: record.objectID,
      occasion_enriched: "Yes",
      occasion: enrichment.occasion || []
    }
  } catch (error) {
    return {
      objectID: record.objectID,
      occasion_enriched: "No",
    };
  }

}
 
async function getModelResponse(requestContent, image,secret) {
  try {

    const body = JSON.stringify({
      model: 'chatgpt-4o-latest',
      messages: [
        {
          role: 'user',
          content: [
            { type: "text", text: requestContent },
            { type: "image_url", image_url: { url: image } }
          ],
        }
      ],
      response_format: {
        'type': 'json_object'
      }
    })

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${secret}`
      },
      body: body
    });
 
    if (!response.ok) {
      const errorData = await response.json();
      console.error(`Error: ${response.status} ${response.statusText}`, errorData);
      throw new Error(`API responded with status ${response.status}`);
    }

 
    const data = await response.json();
    return JSON.parse(data.choices[0].message.content);
  } catch (error) {

    console.error(`Error during API call: ${error.message}`);

    return null
  }
}
 
const prompt = `1. Identify the productâ€™s category and any other relevant attributes from the provided payload, using the provided image to improve context.
2. Categorize the item into one or more `+facetName+` from the following list:`+ facetValues.join(', ') +` 
3. The output should be a JSON object with a key "`+facetName+`" containing an array of values. Each value must be one of the listed values.
4. Do not include any additional keys, product names, or extra details.
5. only include the most suitable values not more not more than two.
Example Output:
{
  "`+facetName+`": `+JSON.stringify(facetValues)+`
}
Notes:
- Ensure that the selected occasions accurately reflect the style and context of the fashion item.`;
